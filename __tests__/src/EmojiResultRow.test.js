 Test generated by RoostGPT for test EmojiSearch using AI Type Open AI and AI Model gpt-4-1106-preview

import React from 'react';
import { render } from '@testing-library/react';
import EmojiResultRow from './EmojiResultRow';

describe('EmojiResultRow', () => {

  test('renders the component with props', () => {
    const title = "Smiley";
    const symbol = "😀";
    const { container, getByText, getByAltText } = render(
      <EmojiResultRow title={title} symbol={symbol} />
    );

    expect(getByText(title)).toBeInTheDocument();
    expect(getByAltText(title)).toBeInTheDocument();
    expect(container.querySelector(".copy-to-clipboard")).toBeInTheDocument();
    expect(container.querySelector(".copy-to-clipboard")).toHaveAttribute('data-clipboard-text', symbol);
  });

  test('renders correctly with different emoji', () => {
    const title = "Heart";
    const symbol = "❤️";
    const { container, getByText, getByAltText } = render(
      <EmojiResultRow title={title} symbol={symbol} />
    );

    expect(getByText(title)).toBeInTheDocument();
    expect(getByAltText(title)).toBeInTheDocument();
    expect(container.querySelector(".copy-to-clipboard")).toBeInTheDocument();
    expect(container.querySelector(".copy-to-clipboard")).toHaveAttribute('data-clipboard-text', symbol);
  });

  test('does not render img element when symbol is missing', () => {
    const title = "Missing Symbol";
    const { queryByAltText } = render(
      <EmojiResultRow title={title} />
    );

    expect(queryByAltText(title)).toBeNull();
  });

  test('does not crash if title and symbol are undefined', () => {
    const { container } = render(<EmojiResultRow />);
    expect(container).toBeEmptyDOMElement();
  });

});

